@model Books.Models.Author

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>

@* Form for Create New Author *@
<div class="form-horizontal">
    <h4>Author</h4>
    <hr />
    @Html.AntiForgeryToken()

    <div class="form-group">
        @Html.LabelFor(model => model.au_id, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.au_id, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.au_lname, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.au_lname, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.au_fname, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.au_fname, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.phone, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.phone, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.address, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.address, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.city, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.city, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.state, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.state, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.zip, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.zip, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.contract, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.contract, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    @* Div Container for Validation Messages *@
    <div class="text-danger" id="ValidationMessage">
    </div>
    <br />
    <br />

    @* Spinner Image and Div for Web App Busy Working *@
    <div id="modal" class="modal" style="display:none;padding-top:400px;">
        <div class="text-center">
            <img alt="" src="~/Content/Images/loader4.gif" />
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <button id="CreateBTN" value="Create" class="btn btn-primary">Create</button>
        </div>
    </div>

</div>

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
</div>

@* JQuery Code for Form Validation and also AJAX HTTP POST *@
@section Scripts {
<script type="text/javascript">
$(document).ready(function () {
      
    $("#CreateBTN").click(function () {
 
        var formValidated = true;
        var validationMessage = "Error: ";

        // Author ID
        var au_id = "";
        if ($("#au_id").val().trim() != "")
        {
            au_id = $("#au_id").val().trim();
        }
        else
        {
            formValidated = false;
            validationMessage = validationMessage + "Author ID Required<br>";
        }

        // Author Last Name
        var au_lname = "";
        if ($("#au_lname").val().trim() != "") {
            au_lname = $("#au_lname").val().trim();
        }
        else {
            formValidated = false;
            validationMessage = validationMessage + "Author Last Name Required<br>";
        }

        // Author First Name
        var au_fname = "";
        if ($("#au_fname").val().trim() != "") {
            au_fname = $("#au_fname").val().trim();
        }
        else {
            formValidated = false;
            validationMessage = validationMessage + "Author First Name Required<br>";
        }

        // Author Phone
        var phone = "";
        if ($("#phone").val().trim() != "") {
            phone = $("#phone").val().trim();
        }
        else {
            formValidated = false;
            validationMessage = validationMessage + "Author Phone Required<br>";
        }

        // Author Address
        var address = "";
        if ($("#address").val().trim() != "") {
            address = $("#address").val().trim();
        }
        else {
            formValidated = false;
            validationMessage = validationMessage + "Author Address Required<br>";
        }

        // Author City
        var city = "";
        if ($("#city").val().trim() != "") {
            city = $("#city").val().trim();
        }
        else {
            formValidated = false;
            validationMessage = validationMessage + "Author City Required<br>";
        }

        // Author State
        var state = "";
        if ($("#state").val().trim() != "") {
            state = $("#state").val().trim();
        }
        else {
            formValidated = false;
            validationMessage = validationMessage + "Author State Required<br>";
        }

        // Author Zip
        var zip = "";
        if ($("#zip").val().trim() != "") {
            zip = $("#zip").val().trim();
        }
        else {
            formValidated = false;
            validationMessage = validationMessage + "Author Zip Required<br>";
        }

        var contract = $("#contract").is(":checked");

        var __RequestVerificationToken = $("input[name=__RequestVerificationToken]").val();

        if (formValidated === true) {

            // POST to Create Author
            $.post("/Authors/Create",
                {
                    __RequestVerificationToken: __RequestVerificationToken,
                    au_id: au_id,
                    au_lname: au_lname,
                    au_fname: au_fname,
                    phone: phone,
                    address: address,
                    city: city,
                    state: state,
                    zip: zip,
                    contract: contract
                },
                function (data, status) {
                    // alert("Data: " + data + "\nStatus: " + status);
                });

            // show spinner for busy
            $("#modal").show();

            // wait 4 seconds for the database insert to complete before redirecting
            window.setTimeout(function () { location.href = "/Authors"; }, 4000);

        }
        else
        {
            $("#ValidationMessage").html(validationMessage);
        }

    });
});
</script>
}